==> Using Pygame. Pygame is a collection of fun powerful pyhon modules that manages graphics anniimation, and even sound.

Game development Plan (JIRA or ZenHUb): 
--> The player will control a rocket ship that appears at the bottom center of the game.
--> The player can move ship to right or left using the arrow keys and shoot bullets using space bar
--> When game starts a fleet of alien will fill the sky above the top
--> Shoot doen aliens before they reach player or bottom of screen.

STEP1:
Navigate to folder and install pygame:
######
python -m pip install -user pygame 	or 	pip install pygame
#####

STEP 2:
Each time we introduce a new functionality into the game we would typically create new settings. Instead of adding the settings into our code its best to create a seperate module
called settings.py, that contains a class called Settings:

NB: We can have various files that use the same settings module. there we can easily adjust values of our game, rather than hard coding direct values

STEP 3:
Create a settings module, and import Settings class from settings, and instantiate the new Settings class.

STEP 4: 
Create a ship module that will manegthe behaviuor of players "ship" to your game by loading an Image. convert your jpeg to bitmap.

STEP 5:
We create a ship module that will have the class Ship, this will manage the behaviour of the player.

STEP 6:
Refactor code:
Simplify the strcuture if code, to make it easier to build on
Break run_game() into helper method.
-first create check_events() -- this is the helper method

STEP 7:
Write a program to ensure player can navigate the ship to either a right or left.
Write  method for the keys, whenever a player presses a key each movement in pygame is considered an event.

STEP 8:
Ship always moves one pixel per cycle, to adjust the speed of ship we go to settings.


STEP 9:
To avoid our ship ffrom going off the screen we set cetain ranges.

STEP 10:
refactoring _check_events()

Also, launcing game in full_screen mode.
BASIC STRUCTURE OF GAME.
NB: So far we only run te alien-invasion file to play the game, the other files are imported into the alien-inasion file.

STEP 11:
Implementing the shooting mechanism with our space ship. Add bullet feature to settings. Then create a bullet module with Bullet class. NB:the bullet has no image

STEP 12:
Now we wrute code to fire bullet each time the player presses a space bar. Then we write create a group to store all the live bullets so as to maage all bullets already fired.

STEP 13:
Modifying helper methods check keydown events. 

STEP 14:
The bullets fired are only not visible after the pass thru the top of our screen ut still exist and can ba problem in memory if not calculated or deleted.
NB: We cant remove a list of items over a for loop

STEP 15:
Adding aliens to the game. since we are using a pygaem>Group to group all aliens together we do not need a method for drawing our aliens.

-add an alien group
Add a helper method for creating a fleet of alien
_create_fleet()
add aliens to your alien group
-Draw alien to screen to make visible under helper mthd _update_screen

Step 16:
Build an entire alien flee, first figure our how man aliens can fit across the screen.
-How much horizontal row
-Each row margin is alien size

First instantiate a single alien to determine the spacing, then determne the width, then available space, then create space to the left and right side of the screen.


Secondly, Determin the number of rows that fit on the screen, Repeat the loop for creting alien in one row until it fills the row.

To determine, we subtract the alient height from top, ship height from bottom, two alien height from the bottom of the screen. To create some empty space above the ship so playera can have time to shoot the alien at the beggining stage of the game.

To find the number of rows divide available spae by 2 * alien_height.

Step 17:
Alien settings, speed, makng moveacross the screen until it drop down to collide or reach bottom of screen.
first refernce the alien setings in alien.py file, 

Then add an update method to move the alien to right in your alien.py. Then update this helper method into the main alien_invasion game, by creating.
_update_aliens() method.

NB: The aline_update comes after the bullet update because we muc chect to see if the aliens have been hit by any bullet.

Step 18:
Check if the alein is in  either edge and add an update methid to ensure it moves n appropriate direction.
First- In alien.py add method called check_edges().
then - Modify the update methd to allow motion to left or right
then -I main alien call method and add

